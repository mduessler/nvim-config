#!/usr/bin/bash

RESET="\033[0m"
BOLD="\033[1m"
RED="\033[91m"
GREEN="\033[92m"
ORANGE="\033[33m"
CYAN="\033[94m"

BASH_TESTS_DIR="${NVIM_CONFIG}/tests/bash"

BASH_TEST_FILES=()
BASH_STATUS_TESTS=()
BASH_OUTPUT_TESTS=()
BASH_COUNTER_SUCCESS_TESTS=()
BASH_COUNTER_FAILURE_TESTS=()

function get_bash_test_files() {
    local content=""
    local regex=""
    content="$(cd "${BASH_TESTS_DIR}" && ls -l test_*.bats)"
    regex="^.*(test_.*\.bats)$"
    while IFS= read -r line; do
        if [[ ${line} =~ ${regex} ]]; then
            BASH_TEST_FILES+=("${BASH_REMATCH[1]}")
        fi
    done <<<"${content}"
}

function execute_bash_test() {
    output=$(bats --tap "${BASH_TESTS_DIR}/$1")
    status="$?"
    BASH_STATUS_TESTS+=("${status}")
    BASH_OUTPUT_TESTS+=("${output}")
    count_tests "${output}"
}

function count_tests() {
    output=$1
    regex_success="^(ok [0-9]+ ).*$"
    regex_failure="^(not ok [0-9]+ ).*$"
    local counter_success=0
    local counter_failure=0
    while IFS= read -r line; do
        if [[ ${line} =~ ${regex_success} ]]; then
            ((counter_success++))
        elif [[ ${line} =~ ${regex_failure} ]]; then
            ((counter_failure++))
        fi
    done <<<"${output}"
    BASH_COUNTER_SUCCESS_TESTS+=("${counter_success}")
    BASH_COUNTER_FAILURE_TESTS+=("${counter_failure}")
}

function print_wrong_output() {
    local output="$1"
    local print_next=0
    while IFS= read -r line; do
        if [[ $line =~ ^not\ ok\ ([0-9]+)\ (.*) ]]; then
            printf "%b[TEST]%b %b%3s%b %b%s%b\n" "${RED}" "${RESET}" "${BOLD}" "${BASH_REMATCH[1]}" "${RESET}" "${ORANGE}" "${BASH_REMATCH[2]}" "${RESET}"
            print_next=1
        elif [[ $print_next -eq 1 && $line =~ ^# ]]; then
            printf "%s\n" "${line}"
        else
            print_next=0
        fi
    done <<<"$output"
}

function get_test_counter() {
    local bats_tests_counter=0
    bats_tests_counter=$(bats -c "${BASH_TESTS_DIR}")
    local lua_tests_counter=0
    echo $(("${bats_tests_counter}" + "${lua_tests_counter}"))
}

function main() {
    get_bash_test_files

    local failures=false
    local width=10
    for test in "${BASH_TEST_FILES[@]}"; do
        if [[ ${#test} -gt $width ]]; then
            width=${#test}
            if [[ $((width % 2)) -eq 1 ]]; then
                width=$((width + 1))
            fi
        fi
    done
    # 24 - 16
    width=$((width + 6))
    local string="-"
    char="-"
    string=$(printf '%.0s'"${char}" $(seq 1 $(((width + 18) / 2))))

    printf "%s Starting Tests %s\n" "${string}" "${string}"
    printf "Collected %b%d%b tests\n" "${BOLD}" "$(get_test_counter)" "${RESET}"

    for test in "${BASH_TEST_FILES[@]}"; do
        execute_bash_test "${test}"
        index=$(("${#BASH_STATUS_TESTS[@]}" - 1))
        printf "%b[FILE]%b %-*s" "${CYAN}" "${BOLD}" "${width}" "${test}"

        if [[ ${BASH_COUNTER_FAILURE_TESTS[${index}]} -gt 0 ]]; then
            failures=true
            printf "%b" "${RED}"
        else
            printf "%b" "${GREEN}"
        fi

        printf "%-3d passed / %3d failure" "${BASH_COUNTER_SUCCESS_TESTS[${index}]}" "${BASH_COUNTER_FAILURE_TESTS[${index}]}"

        if [[ ${BASH_COUNTER_FAILURE_TESTS[${index}]} -gt 0 ]]; then
            printf "  %b" "${RESET}"
        else
            printf "  %b" "${RESET}"
        fi
        printf "\n"
    done

    char="="
    string=$(printf '%.0s'"${char}" $(seq 1 $(((width + 24) / 2))))
    if ${failures}; then
        printf "%s FAILURES %s\n" "${string}" "${string}"
    else
        printf "%s%s%s\n" "${string}" "==========" "${string}"
    fi


    char="-"
    string=$(printf '%.0s'"${char}" $(seq 1 $((width + 34))))
    for i in "${!BASH_TEST_FILES[@]}"; do
        if ! ${failures} && [[ ${BASH_STATUS_TESTS[${i}]} -ne 0 ]]; then
            printf "%s\n" "${string}"
        fi
        if [[ ${BASH_STATUS_TESTS[${i}]} -ne 0 ]]; then
            failures=true
            printf "%b[FILE]%b %s\n" "${CYAN}" "${BOLD}" "${BASH_TEST_FILES[${i}]}"
            print_wrong_output "${BASH_OUTPUT_TESTS[$i]}"
        fi
    done

}
main
