#!/usr/bin/bash

BASH_TESTS_DIR="${NVIM_CONFIG}/tests/bash"

BASH_TEST_FILES=()
BASH_STATUS_TESTS=()
BASH_OUTPUT_TESTS=()
BASH_COUNTER_SUCCESS_TESTS=()
BASH_COUNTER_FAILURE_TESTS=()

function get_bash_test_files() {
    local content=""
    local regex=""
    content="$(cd "${BASH_TESTS_DIR}" && ls -l test_*.bats)"
    regex="^.*(test_.*\.bats)$"
    while IFS= read -r line; do
        if [[ ${line} =~ ${regex} ]]; then
            BASH_TEST_FILES+=("${BASH_REMATCH[1]}")
        fi
    done <<<"${content}"
}

function execute_bash_tests() {
    for test in "${BASH_TEST_FILES[@]}"; do
        output=$(bats "${BASH_TESTS_DIR}/${test}")
        status="$?"
        BASH_STATUS_TESTS+=("${status}")
        BASH_OUTPUT_TESTS+=("${output}")
        count_tests "${output}"
    done
}

function count_tests() {
    output=$1
    regex_success="^(ok [1-9]+ ).*$"
    regex_failure="^(not ok [1-9]+ ).*$"
    local counter_success=0
    local counter_failure=0
    while IFS= read -r line; do
        if [[ ${line} =~ ${regex_success} ]]; then
            ((counter_success++))
        elif [[ ${line} =~ ${regex_failure} ]]; then
            ((counter_failure++))
        fi
    done <<<"${output}"
    BASH_COUNTER_SUCCESS_TESTS+=("${counter_success}")
    BASH_COUNTER_FAILURE_TESTS+=("${counter_failure}")
}

function print_wrong_output() {
    local output="$1"
    local print_next=0
    while IFS= read -r line; do
        if [[ $line =~ ^not\ ok\ ([0-9]+)\ (.*) ]]; then
            printf "[TEST] %s: %s\n" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
            print_next=1
        elif [[ $print_next -eq 1 && $line =~ ^# ]]; then
            printf "%s\n" "${line}"
        else
            print_next=0
        fi
    done <<<"$output"
}

function main() {
    printf "-------------------------- Starting Tests --------------------------\n"
    get_bash_test_files
    execute_bash_tests
}
