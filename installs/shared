#!/usr/bin/env bash

set -e

SCRIPT_DIR="${SCRIPT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"

source "${SCRIPT_DIR}/utils"

install_packages_with_pkg_mgr() {
    if [ -z "${PKG_MGR}" ]; then
        warning "Need to set 'PKG_MGR', or call 'identify_system_pkg_mgr'."
        return 3
    elif [ $# -eq 0 ]; then
        warning "No package given. Please provide at least one packge."
        return 2
    fi

    PACKAGES="$*"
    info "Installing: ${PACKAGES} ..."
    debug "Updating repositories."
    if ! sudo "${PKG_MGR}" update -y; then
        warning "Can not update the package repositories."
    fi

    debug "Installing package(s)."
    if ! sudo "${PKG_MGR}" install -y "$@"; then
        error "Can not install package(s)."
        return 1
    fi

    success "Installed packages: ${PACKAGES}"
    return 0
}

identify_system_pkg_mgr() {
    if [ -z "${PKG_MGR}" ]; then
        info "Identifing package manger."
        if command -v apt-get >/dev/null 2>&1; then
            PKG_MGR="apt-get"
        elif command -v dnf >/dev/null 2>&1; then
            PKG_MGR="dnf"
        else
            warning "No valid package manager found."
            return 1
        fi
    else
        debug "Package manager was already defined as '${PKG_MGR}'"
    fi
    success "Identified '${PKG_MGR}' as package manager."
    return 0
}

install_lua_pkg() {
    if ! command -v lua >/dev/null 2>&1; then
        warning "Rust is not installed or rust and cargo not in '\$PATH'."
        return 3
    elif [ $# -eq 0 ]; then
        warning "No package given. Please provide at least one packge."
        return 2
    fi

    local packages=("$@")

    for pkg in "${packages[@]}"; do
        if luarocks show "${pkg}" >/dev/null 2>&1; then
            info "${pkg} is already installed, skipping..."
            continue
        fi

        info "Installing ${pkg}..."
        if ! luarocks install "${pkg}"; then
            error "Failed to install ${pkg}"
            return 1
        fi
        success "Installed ${pkg}"
    done
    return 0
}

install_cargo_pkg() {
    if ! command -v rustc >/dev/null 2>&1 || ! command -v cargo >/dev/null 2>&1; then
        warning "Rust is not installed or rust and cargo not in '\$PATH'."
        return 3
    elif [ $# -eq 0 ]; then
        warning "No package given. Please provide at least one packge."
        return 2
    fi

    local packages=("$@")

    for pkg in "${packages[@]}"; do
        if cargo install --list | grep -q "^${pkg} "; then
            info "${pkg} is already installed, skipping..."
            continue
        fi

        info "Installing ${pkg}..."
        if ! cargo install "${pkg}"; then
            error "Failed to install ${pkg}"
            return 1
        fi
        success "Installed ${pkg}"
    done
    return 0
}
