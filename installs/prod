#!/usr/bin/env bash

set -e

SCRIPT_DIR="${SCRIPT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
DEPENDENCIES="${DEPENDENCIES:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../dependencies}"

source "${SCRIPT_DIR}/utils" || exit 1
source "${DEPENDENCIES}" || exit 1
source "${SCRIPT_DIR}/neovim" || exit 1
source "${SCRIPT_DIR}/shared" || exit 1

install_prod() {
    if ! install_prod_dependencies; then
        error "Can not install production dependencies."
        return 2
    fi

    if ! install_prod_requirements; then
        error "Can not install production requirements."
        return 3
    fi
    success "Installed production dependencies and requirements."
    return 0
}

install_rust() {
    if check_command rustc; then
        info "Rust is already installed."
        return 0
    fi

    CARGO_HOME="${CARGO_HOME:-$HOME/.cargo}"
    debug "CARGO_HOME is set to '${CARGO_HOME}'."

    debug "Downloading and install rust..."
    if ! curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; then
        debug "Curl exited with ${PIPESTATUS[0]} and sh exited with ${PIPESTATUS[1]}."
        error "Installation of rust failed."
        return 2
    fi
    echo ":$PATH:" | grep -q ":${CARGO_HOME}/bin:" || export PATH="${CARGO_HOME}/bin:${PATH}"
    debug "Added '${CARGO_HOME}/bin' to PATH $"

    success "Rust has been successfully installed."
    return 0
}

install_prod_dependencies() {
    info "Installing production dependencies ..."

    if [ -z "${PKG_MGR}" ]; then
        if ! identify_system_pkg_mgr; then
            error "Can not identify system package manager."
            return 2
        fi
    fi

    case "${PKG_MGR}" in
        apt-get) install_packages_with_pkg_mgr "${APT_DEPS[@]}" ;;
        dnf) install_packages_with_pkg_mgr "${DNF_DEPS[@]}" ;;
        *)
            error "Unsupported package manager: ${PKG_MGR}"
            return 3
            ;;
    esac

    if ! install_dependencies_independent_of_pkg_mgr; then
        error "Can not install dependencies independent of package manager."
        return 4
    fi

    if ! check_nvim_version; then
        if ! install_nvim; then
            error "Can not install neovim."
            return 5
        fi
    fi

    success "Dependencies has been successfully installed."
    return 0
}

install_dependencies_independent_of_pkg_mgr() {
    for dep in "${DEPS[@]}"; do
        func="install_${dep}"
        if declare -f "$func" >/dev/null; then
            if ! "$func"; then
                error "Failed to install dependency: ${dep}"
                return 2
            fi
        else
            warning "No installer function defined for ${dep}, skipping."
            return 3
        fi
    done
    success "Installed all production dependencies defined in \$DEPS"
    return 0
}

install_prod_requirements() {
    if ! install_lua_pkg "${LUA_REQ[@]}"; then
        error "Can not install lua requirements."
        return 2
    fi

    if ! install_cargo_pkg "${RUST_REQ[@]}"; then
        error "Can not install rust requirements."
        return 3
    fi

    success "Installed requirements successfully."
    return 0
}
