#!/usr/bin/env bash

set -e

SCRIPT_DIR="${SCRIPT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
DEPENDENCIES="${DEPENDENCIES:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../dependencies}"

source "${SCRIPT_DIR}/utils" || exit 1
source "${DEPENDENCIES}" || exit 1

install_nvim() {
    GIT_DEST_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/src"
    [ -d "${GIT_DEST_DIR}" ] || mkdir -p "${GIT_DEST_DIR}"

    local nvim_dir=${GIT_DEST_DIR}/neovim

    if [ -d "${nvim_dir}" ] && dir_is_git_repo "${nvim_dir}"; then
        pull_git_dir "${nvim_dir}" || return 2
    elif [ ! -d "${nvim_dir}" ]; then
        read -r pid tmpfile < <(clone_repo https://github.com/neovim/neovim "${nvim_dir}")
        status=$?
        if [ "${status}" -ne 0 ]; then
            error "clone_repo function failed!"
            return 3
        fi
        wait_for_clone_process "${pid}" "${tmpfile}"
    else
        error "Directory ${nvim_dir} already exists and is no git repo."
        return 1
    fi

    cd "${nvim_dir}" && git checkout "v${NVIM_MAJOR_REQ}.${NVIM_MINOR_REQ}.${NVIM_PATCH_REQ}" || return 4
    make CMAKE_BUILD_TYPE=Release || return 5
    sudo make install || return 5
    success "Installed neovim version: $(nvim --version 2>/dev/null | head -n1)"
    return 0
}

check_nvim_version() {
    NVIM_VERSION_INFO=$(nvim --version 2>/dev/null | head -n1 | sed -E 's/^NVIM v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

    IFS="." read -r MAJOR MINOR PATCH <<EOF
$NVIM_VERSION_INFO
EOF
    if [[ "$MAJOR" =~ ^[0-9]+$ && "$MINOR" =~ ^[0-9]+$ && "$PATCH" =~ ^[0-9]+$ ]]; then
        debug "Installed nvim version is ${NVIM_VERSION_INFO}"

        if [ "$MAJOR" -ge "$NVIM_MAJOR_REQ" ] && [ "$MINOR" -ge "$NVIM_MINOR_REQ" ] && [ "$PATCH" -ge "$NVIM_PATCH_REQ" ]; then
            return 0
        fi
        warning "Neovim version is to low."
        return 1
    else
        error "Invalid version format: ${MAJOR}.${MINOR}.${PATCH}"
    fi
    return 1
}
