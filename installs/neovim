#!/usr/bin/env bash

set -e

SCRIPT_DIR="${SCRIPT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
DEPENDENCIES="${DEPENDENCIES:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../dependencies}"

source "${SCRIPT_DIR}/utils" || exit 1
source "${DEPENDENCIES}" || exit 1

install_nvim() {
    info "Installing neovim."
    local git_dest_dir="${XDG_DATA_HOME:-$HOME/.local/share}/src"
    [ -d "${git_dest_dir}" ] || mkdir -p "${git_dest_dir}"

    local nvim_dir=${git_dest_dir}/neovim

    if [ -d "${nvim_dir}" ] && dir_is_git_repo "${nvim_dir}"; then
        debug "Neovim git repo exists. Pulling ..."
        pull_git_dir "${nvim_dir}" || return 2
    elif [ ! -d "${nvim_dir}" ]; then
        debug "Neovim git repo does not exists. Cloning ..."
        read -r pid tmpfile < <(clone_repo https://github.com/neovim/neovim "${nvim_dir}")
        status=$?
        if [ "${status}" -ne 0 ]; then
            error "clone_repo function failed!"
            return 3
        fi
        wait_for_clone_process "${pid}" "${tmpfile}"
    else
        error "Directory ${nvim_dir} already exists and is no git repo."
        return 1
    fi
    debug "Change workdir to ${nvim_dir} and install neovim v${NVIM_MAJOR_REQ}.${NVIM_MINOR_REQ}.${NVIM_PATCH_REQ}"
    cd "${nvim_dir}" && git checkout "v${NVIM_MAJOR_REQ}.${NVIM_MINOR_REQ}.${NVIM_PATCH_REQ}" || return 4
    make CMAKE_BUILD_TYPE=Release || return 5
    sudo make install || return 6
    success "Installed neovim version: $(nvim --version 2>/dev/null | head -n1)"
    return 0
}

check_nvim_version() {
    local nvim_version major minor patch
    if nvim_version=$(nvim --version 2>/dev/null | awk 'NR==1{match($0,/v([0-9]+\.[0-9]+\.[0-9]+)/,a); print a[1]}'); then
        IFS="." read -r major minor patch <<<"$nvim_version"
        if [[ "${major}" =~ ^[0-9]+$ && "${minor}" =~ ^[0-9]+$ && "${patch}" =~ ^[0-9]+$ ]]; then
            debug "Installed nvim version is ${nvim_version}"
            if [ "${major}" = "$NVIM_MAJOR_REQ" ] && [ "${minor}" = "$NVIM_MINOR_REQ" ] && [ "${patch}" = "$NVIM_PATCH_REQ" ]; then
                return 0
            fi
            warning "Neovim version is to low."
            return 3
        else
            error "Invalid version format: ${major}.${minor}.${patch}"
            return 1
        fi
    fi
    warning "Neovim not installed."
    return 2
}
