#!/usr/bin/env bash

set -e

[ -z "$SCRIPT_DIR" ] && SCRIPT_DIR="$(pwd)/"

source "${SCRIPT_DIR}/../dependencies"
source "${SCRIPT_DIR}/utils"

install_nvim() {
    if ! install_dependencies; then
        error "Could not install dependencies"
        return 1
    fi
    GIT_DEST_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/src"
    [ -d "${GIT_DEST_DIR}" ] || mkdir -p "${GIT_DEST_DIR}"
    git clone https://github.com/neovim/neovim -b "v${NVIM_MAJOR_REQ}.${NVIM_MINOR_REQ}.${NVIM_PATCH_REQ}" "${GIT_DEST_DIR}/neovim" || return 1
    debug "Cloned nvim repo"
    cd "${GIT_DEST_DIR}/neovim" || return 1
    make CMAKE_BUILD_TYPE=Release || return 1
    sudo make install || return 1
    success "Installed neovim version: $(nvim --version 2>/dev/null | head -n1)"
}

check_nvim_version() {
    NVIM_VERSION_INFO=$(nvim --version 2>/dev/null | head -n1 | sed -E 's/^NVIM v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

    IFS="." read -r MAJOR MINOR PATCH <<EOF
$NVIM_VERSION_INFO
EOF

    debug "Installed nvim version is ${NVIM_VERSION_INFO}"

    if [ "$MAJOR" -ge "$NVIM_MAJOR_REQ" ] && [ "$MINOR" -ge "$NVIM_MINOR_REQ" ] && [ "$PATCH" -ge "$NVIM_PATCH_REQ" ]; then
        return 0
    fi
    warning "Neovim version is to low."
    return 1
}
