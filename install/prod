#!/usr/bin/env bash

set -e

SCRIPT_DIR="${SCRIPT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"

source "${SCRIPT_DIR}/../dependencies" || exit 1
source "${SCRIPT_DIR}/neovim" || exit 1
source "${SCRIPT_DIR}/utils" || exit 1

install_rust() {
    if command -v rustc >/dev/null 2>&1; then
        info "Rust is already installed."
        return 0
    fi

    CARGO_HOME="${CARGO_HOME:-$HOME/.cargo}"
    debug "CARGO_HOME is set to '${CARGO_HOME}'."

    info "Downloading and install rust..."
    if ! curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; then
        error "Installation of rust failed."
        return 1
    fi
    echo ":$PATH:" | grep -q ":${CARGO_HOME}/bin:" || export PATH="${CARGO_HOME}/bin:${PATH}"

    success "Installed rust."
    return 0
}

install_dependencies() {
    info "Installing production dependencies ..."

    if [ -z "${PKG_MGR}" ]; then
        if ! identify_system_pkg_mgr; then
            return 1
        fi
    fi

    case "${PKG_MGR}" in
        apt-get) install_packages_with_pkg_mgr "${APT_DEPS[@]}" ;;
        dnf) install_packages_with_pkg_mgr "${DNF_DEPS[@]}" ;;
        *)
            error "Unsupported package manager: ${PKG_MGR}"
            return 1
            ;;
    esac

    if [ $? -ne 0 ]; then
        error "Dependency installation failed."
        return 1
    fi

    if ! install_dependencies_independent_of_pkg_mgr; then
        return 1
    fi

    if ! check_nvim_version; then
        install_nvim
        if [ $? -ne 0 ]; then
            error "Neovim installation failed."
            return 1
        fi
    fi

    success "Installed dependencies successfully."
}

install_dependencies_independent_of_pkg_mgr() {
    for dep in "${DEPS[@]}"; do
        func="${dep}_installer"
        if declare -f "$func" >/dev/null; then
            "$func"
        fi
        if [ $? -ne 0 ]; then
            error "Can not install dependency ${dep}."
            return 1
        fi
    done
}

install_requirements() {
    install_lua_pkg "${LUA_REQ[@]}"
    if [ $? -ne 0 ]; then
        error "Can not install lua requirements."
        return 1
    fi

    install_rust_pkg "${RUST_REQ[@]}"
    if [ $? -ne 0 ]; then
        error "Can not install rust requirements."
        return 1
    fi

    success "Installed dependencies successfully."

}
